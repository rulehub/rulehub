name: Compliance Maps Duplicates

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., YYYY.MM.DD-<sha> or v1.2.3). Falls back to repo/org variable CI_IMAGE_TAG or the repository's pinned fallback."
        required: false
        default: ""
  pull_request:
    paths:
      - "compliance/maps/*.yml"
      - "tools/fix_compliance_map_dupes.py"
  push:
    paths:
      - "compliance/maps/*.yml"
      - "tools/fix_compliance_map_dupes.py"

permissions:
  contents: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., YYYY.MM.DD-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  resolve:
    name: Resolve CI image (base)
    needs: guard
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.resolve.outputs.image }}
      tag: ${{ steps.resolve.outputs.tag }}
    steps:
      - name: Resolve CI image tag and ref
        id: resolve
        shell: bash
        env:
          INPUT_TAG: ${{ inputs.ci_image_tag }}
          VARS_TAG: ${{ vars.CI_IMAGE_TAG }}
        run: |
          set -euo pipefail
          tag="${INPUT_TAG:-}"
          if [ -z "${tag}" ] && [ -n "${VARS_TAG:-}" ]; then
            tag="${VARS_TAG}"
          fi
          if [ -z "${tag}" ] && [ -n "${CI_IMAGE_TAG:-}" ]; then
            tag="${CI_IMAGE_TAG}"
          fi
          # Under act, tag should be injected by the runner (CI_IMAGE_TAG). We still fail if empty to avoid drift.
          if [ -z "${tag}" ]; then
            echo "ERROR: No CI image tag provided. Set workflow input ci_image_tag or repository/org variable CI_IMAGE_TAG." >&2
            exit 1
          fi
          image_ref="ghcr.io/rulehub/ci-base:${tag}"
          {
            echo "image=${image_ref}"
            echo "tag=${tag}"
          } >> "$GITHUB_OUTPUT"
  check-dupes:
    needs: [guard, resolve]
    runs-on: ubuntu-latest
    container:
      image: "${{ needs.resolve.outputs.image }}"
      options: --user 0:0
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Prepare Python env (venv with baked deps)
        run: |
          python-venv-install
      - name: Check duplicate policies in compliance maps
        shell: bash
        run: bash tools/ci/check-compliance-dupes.sh

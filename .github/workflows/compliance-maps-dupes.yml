name: Compliance Maps Duplicates

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or pinned default."
        required: false
        default: ""
  pull_request:
    paths:
      - "compliance/maps/*.yml"
      - "tools/fix_compliance_map_dupes.py"
  push:
    paths:
      - "compliance/maps/*.yml"
      - "tools/fix_compliance_map_dupes.py"

permissions:
  contents: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  check-dupes:
    needs: guard
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Prepare Python env (venv with baked deps)
        run: |
          python-venv-install
      - name: Check duplicate policies in compliance maps
        shell: bash
        run: |
          . .venv/bin/activate
          # Ensure a YAML library is available (prefer ruamel.yaml; fallback to PyYAML)
          python - <<'PY' || pip install --no-input pyyaml
          import importlib.util, sys
          spec1 = importlib.util.find_spec('ruamel.yaml')
          spec2 = importlib.util.find_spec('yaml')
          sys.exit(0 if (spec1 or spec2) else 1)
          PY
          python tools/fix_compliance_map_dupes.py --check

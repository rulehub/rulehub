name: Metadata Validate

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""
  pull_request:
    paths:
      - "policies/**/metadata.yaml"
      - "tools/validate_metadata.py"
      - "tools/schemas/policy-metadata.schema.json"
  push:
    paths:
      - "policies/**/metadata.yaml"
      - "tools/validate_metadata.py"
      - "tools/schemas/policy-metadata.schema.json"
  # Manual run (no inputs) â€“ strict mode can be toggled by providing env STRICT_METADATA=1

permissions:
  contents: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  validate:
    needs: guard
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install dependencies (venv with baked deps)
        run: |
          python-venv-install

      - name: Validate metadata
        env:
          # Strict mode rules:
          # 1. Always strict for pull_request events.
          # 2. Optional strict for other events: export STRICT_METADATA=1 (local) or define a repo/Org variable.
          STRICT_EMPTY_PATHS: ${{ github.event_name == 'pull_request' && '1' || '' }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          # Local / manual opt-in strict mode
          if [ "${STRICT_METADATA:-}" = "1" ]; then export STRICT_EMPTY_PATHS=1; fi
          . .venv/bin/activate
          python -c "import yaml, jsonschema" 2>/dev/null || pip install --no-input pyyaml jsonschema
          python tools/validate_metadata.py

  # noop-act removed: containerized job is ACT-compatible

name: Metadata Validate

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., YYYY.MM.DD-<sha> or v1.2.3). Falls back to repo/org variable CI_IMAGE_TAG or the repository's pinned fallback."
        required: false
        default: ""
  pull_request:
    paths:
      - "policies/**/metadata.yaml"
      - "tools/validate_metadata.py"
      - "tools/schemas/policy-metadata.schema.json"
  push:
    paths:
      - "policies/**/metadata.yaml"
      - "tools/validate_metadata.py"
      - "tools/schemas/policy-metadata.schema.json"
  # Manual run (no inputs) â€“ strict mode can be toggled by providing env STRICT_METADATA=1

permissions:
  contents: read
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    env:
      CI_IMAGE_TAG: ${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || vars.CI_IMAGE_TAG || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Enforce non-latest CI image tag
        shell: bash
        run: bash .github/scripts/guard-ci-image-tag.sh "${{ inputs.ci_image_tag }}"
  resolve:
    name: Resolve CI image (ci-base)
    needs: guard
    runs-on: ubuntu-latest
    env:
      CI_IMAGE_TAG: ${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || vars.CI_IMAGE_TAG || '' }}
    outputs:
      image: ${{ steps.r.outputs.image }}
      tag: ${{ steps.r.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Resolve image
        id: r
        uses: ./.github/actions/resolve-ci-image
        with:
          ci_image_tag: ${{ inputs.ci_image_tag }}
          kind: base
  validate:
    needs: [guard, resolve]
    runs-on: ubuntu-latest
    container:
      image: "${{ needs.resolve.outputs.image }}"
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install dependencies (venv with baked deps)
        run: |
          python-venv-install

      - name: Validate metadata
        env:
          # Strict mode rules:
          # 1. Always strict for pull_request events.
          # 2. Optional strict for other events: export STRICT_METADATA=1 (local) or define a repo/Org variable.
          STRICT_EMPTY_PATHS: ${{ github.event_name == 'pull_request' && '1' || '' }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          # Local / manual opt-in strict mode
          if [ "${STRICT_METADATA:-}" = "1" ]; then export STRICT_EMPTY_PATHS=1; fi
          . .venv/bin/activate
          bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/validate_metadata.py

  # noop-act removed: containerized job is ACT-compatible

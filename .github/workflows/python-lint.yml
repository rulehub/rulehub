name: python-lint

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., YYYY.MM.DD-<sha> or v1.2.3). Falls back to repo/org variable CI_IMAGE_TAG or the repository's pinned fallback."
        required: false
        default: ""
  pull_request:
    paths:
      - "tools/**.py"
      - "ruff.toml"
  push:
    branches: [main, master]
    paths:
      - "tools/**.py"
      - "ruff.toml"

permissions:
  contents: read
  security-events: write # needed for SARIF upload
  packages: read # needed to pull GHCR images with GITHUB_TOKEN

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., YYYY.MM.DD-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi

  resolve:
    name: Resolve CI image (base)
    needs: guard
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.resolve.outputs.image }}
      tag: ${{ steps.resolve.outputs.tag }}
    steps:
      - name: Resolve CI image tag and ref
        id: resolve
        uses: ./.github/actions/resolve-ci-image
        with:
          ci_image_tag: ${{ inputs.ci_image_tag }}
          kind: base

  ruff:
    needs: [guard, resolve]
    runs-on: ubuntu-latest
    container:
      image: "${{ needs.resolve.outputs.image }}"
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user 0:0
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      # Node not required for ruff run itself; skip to save time

      - name: Ruff check (tools/*.py) + SARIF
        run: |
          ruff check tools --output-format sarif | tee ruff.sarif
        continue-on-error: true # still upload SARIF even if failures

      # SARIF upload skipped for local act testing (API not available)
      # - name: Upload Ruff SARIF
      #   uses: github/codeql-action/upload-sarif@528ca598d956c91826bd742262cdfc5d02b77710
      #   with:
      #     sarif_file: ruff.sarif
      #   if: ${{ always() && env.ACT != 'true' }}

      # - name: Upload Ruff SARIF
      #   uses: github/codeql-action/upload-sarif@528ca598d956c91826bd742262cdfc5d02b77710
      #   with:
      #     sarif_file: ruff.sarif
      #   if: always()

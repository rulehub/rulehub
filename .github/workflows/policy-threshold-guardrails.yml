name: policy-threshold-guardrails

on:
  pull_request:
    paths:
      - "policies/**"
      - "tests/gatekeeper/**"
      - "tools/enforce_policy_test_thresholds.py"
      - "tools/enforce_policy_test_pairs.py"
      - "tools/enforce_no_generic_only_tests.py"
      - "tools/guardrail_metadata_paths.py"
      - "tools/validate_metadata_schema.py"
      - "tools/analyze_links.py"
      - "tools/normalize_links.py"
      - "requirements.txt"
      - "requirements.lock"
      - ".github/workflows/policy-threshold-guardrails.yml"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tests/gatekeeper/**"
      - "tools/enforce_policy_test_thresholds.py"
      - "tools/enforce_policy_test_pairs.py"
      - "tools/enforce_no_generic_only_tests.py"
      - "tools/guardrail_metadata_paths.py"
      - "tools/validate_metadata_schema.py"
      - "tools/analyze_links.py"
      - "tools/normalize_links.py"
      - "requirements.txt"
      - "requirements.lock"
      - ".github/workflows/policy-threshold-guardrails.yml"
  workflow_dispatch:

concurrency:
  group: policy-threshold-guardrails-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  noop-act:
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "[act] policy-threshold-guardrails skipped."

  policy-threshold-guardrails:
    # Run in CI (non-act) always; allow local act via workflow_dispatch
    if: ${{ github.actor != 'nektos/act' || github.event_name == 'workflow_dispatch' }}
    name: Threshold & Guardrails
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      OPA_VERSION: "v0.68.0"
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python (with pip cache)
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.lock
            requirements.txt

      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.lock ]; then pip install -r requirements.lock; else pip install -r requirements.txt; fi

      - name: Cache OPA binary
        id: cache-opa
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: ~/.cache/opa
          key: opa-${{ runner.os }}-${{ env.OPA_VERSION }}

      - name: Install OPA (cached)
        run: |
          set -euo pipefail
          mkdir -p ~/.cache/opa
          if [ ! -f ~/.cache/opa/opa ] || [ ! -s ~/.cache/opa/opa ] || ! ~/.cache/opa/opa version >/dev/null 2>&1; then
            echo "Downloading OPA ${OPA_VERSION}";
            rm -f ~/.cache/opa/opa
            curl -sSL -o ~/.cache/opa/opa "https://openpolicyagent.org/downloads/${OPA_VERSION#v}/opa_linux_amd64_static" || \
              curl -sSL -o ~/.cache/opa/opa "https://openpolicyagent.org/downloads/${OPA_VERSION#v}/opa_linux_amd64";
            chmod +x ~/.cache/opa/opa;
          else
            echo "Using cached OPA";
          fi
          if command -v sudo >/dev/null 2>&1; then
            sudo cp ~/.cache/opa/opa /usr/local/bin/opa || true
          fi
          if ! command -v opa >/dev/null 2>&1; then
            mkdir -p "$HOME/.local/bin"
            cp ~/.cache/opa/opa "$HOME/.local/bin/opa"
            chmod +x "$HOME/.local/bin/opa"
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
          opa version

      - name: Run gatekeeper tests (to populate coverage metrics)
        run: |
          opa test tests/gatekeeper/policies tests/gatekeeper/tests -v || exit 1

      - name: Enforce policy test thresholds
        run: make policy-test-threshold

      - name: Run guardrails aggregate
        run: make guardrails

      - name: Upload coverage artifacts
        if: always() && github.actor != 'nektos/act'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: policy-test-coverage
          path: |
            dist/policy-test-coverage.json
            dist/policy-test-priorities.md

      - name: Summary
        if: always()
        run: |
          echo "### Threshold & Guardrails" >> $GITHUB_STEP_SUMMARY
          if [ -f dist/policy-test-coverage.json ]; then
            dual=$(jq -r '.dual_direction.percent' dist/policy-test-coverage.json)
            inadequate=$(jq -r '.multi_rule.count_inadequate' dist/policy-test-coverage.json)
            echo "Dual-direction coverage: ${dual}%" >> $GITHUB_STEP_SUMMARY
            echo "Multi-rule inadequacies: ${inadequate}" >> $GITHUB_STEP_SUMMARY
            if [ "$inadequate" != "0" ]; then
              echo '\nFailures (first 10):' >> $GITHUB_STEP_SUMMARY
              jq -r '.multi_rule.list_inadequate[:10][] | "- \(.policy) deny_rules=\(.deny_rules) tests=\(.deny_test_assertions)"' dist/policy-test-coverage.json >> $GITHUB_STEP_SUMMARY || true
            fi
          fi
          echo "Guardrails status: see job log for detail" >> $GITHUB_STEP_SUMMARY

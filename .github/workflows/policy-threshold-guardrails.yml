name: policy-threshold-guardrails

on:
  pull_request:
    paths:
      - "policies/**"
      - "tests/gatekeeper/**"
      - "tools/enforce_policy_test_thresholds.py"
      - "tools/enforce_policy_test_pairs.py"
      - "tools/enforce_no_generic_only_tests.py"
      - "tools/guardrail_metadata_paths.py"
      - "tools/validate_metadata_schema.py"
      - "tools/analyze_links.py"
      - "tools/normalize_links.py"
      - "requirements.txt"
      - "requirements.lock"
      - ".github/workflows/policy-threshold-guardrails.yml"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tests/gatekeeper/**"
      - "tools/enforce_policy_test_thresholds.py"
      - "tools/enforce_policy_test_pairs.py"
      - "tools/enforce_no_generic_only_tests.py"
      - "tools/guardrail_metadata_paths.py"
      - "tools/validate_metadata_schema.py"
      - "tools/analyze_links.py"
      - "tools/normalize_links.py"
      - "requirements.txt"
      - "requirements.lock"
      - ".github/workflows/policy-threshold-guardrails.yml"
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub policy image (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""

concurrency:
  group: policy-threshold-guardrails-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Enforce non-latest CI image tag
        shell: bash
        run: bash .github/scripts/guard-ci-image-tag.sh "${{ inputs.ci_image_tag }}"
  noop-act:
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "[act] policy-threshold-guardrails skipped."

  policy-threshold-guardrails:
    # Run in CI (non-act) only; under act we rely on Stage 1 or noop path
    if: ${{ github.actor != 'nektos/act' }}
    name: Threshold & Guardrails
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: guard
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-policy:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install Python deps
        run: |
          python-venv-install

      - name: Run gatekeeper tests (to populate coverage metrics)
        run: |
          opa test tests/gatekeeper/policies tests/gatekeeper/tests -v || exit 1

      - name: Enforce policy test thresholds
        run: |
          set -euo pipefail
          bash .github/scripts/python-ensure-and-run.sh "import json" python tools/policy_test_coverage.py >/dev/null
          bash .github/scripts/python-ensure-and-run.sh "import json" python tools/enforce_policy_test_thresholds.py

      - name: Run guardrails aggregate
        env:
          FAIL_LINK_AUDIT: "0"
        run: |
          set -euo pipefail
          # Generic-only test guardrail
          bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/enforce_no_generic_only_tests.py
          # Metadata paths guardrail
          bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/guardrail_metadata_paths.py
          # Test pairs guardrail
          bash .github/scripts/python-ensure-and-run.sh "import yaml" python tools/enforce_policy_test_pairs.py
          # Schema validation
          bash .github/scripts/python-ensure-and-run.sh "import jsonschema" python tools/validate_metadata_schema.py
          # Link normalization (non-fatal)
          bash .github/scripts/python-ensure-and-run.sh "import yaml" python tools/normalize_links.py --check --eli || echo "[guardrails] link-normalize-check non-fatal issues"
          # Link audit
          if [ "${FAIL_LINK_AUDIT}" = "1" ]; then
            bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/analyze_links.py --export links_export.json --json links_audit_report.json >/dev/null
            python tools/compare_links_baseline.py || exit 1
          else
            bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/analyze_links.py --export links_export.json --json links_audit_report.json >/dev/null || true
            python tools/compare_links_baseline.py || echo "[guardrails] link-audit non-fatal"
          fi
          echo "[guardrails] complete"

      - name: Upload coverage artifacts
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: policy-test-coverage
          path: |
            dist/policy-test-coverage.json
            dist/policy-test-priorities.md

      - name: Summary
        if: always()
        run: |
          echo "### Threshold & Guardrails" >> $GITHUB_STEP_SUMMARY
          if [ -f dist/policy-test-coverage.json ]; then
            dual=$(jq -r '.dual_direction.percent' dist/policy-test-coverage.json)
            inadequate=$(jq -r '.multi_rule.count_inadequate' dist/policy-test-coverage.json)
            echo "Dual-direction coverage: ${dual}%" >> $GITHUB_STEP_SUMMARY
            echo "Multi-rule inadequacies: ${inadequate}" >> $GITHUB_STEP_SUMMARY
            if [ "$inadequate" != "0" ]; then
              echo '\nFailures (first 10):' >> $GITHUB_STEP_SUMMARY
              jq -r '.multi_rule.list_inadequate[:10][] | "- \(.policy) deny_rules=\(.deny_rules) tests=\(.deny_test_assertions)"' dist/policy-test-coverage.json >> $GITHUB_STEP_SUMMARY || true
            fi
          fi
          echo "Guardrails status: see job log for detail" >> $GITHUB_STEP_SUMMARY

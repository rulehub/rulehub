name: resolve-ci-image

on:
    workflow_call:
        inputs:
            ci_image_tag:
                description: "Immutable tag for RuleHub CI images (e.g., 2025.10.03-<sha> or vX.Y.Z). Optional; falls back to CI_IMAGE_TAG var."
                required: false
                type: string
                default: ""
            kind:
                description: "Which CI image to resolve (base|policy|charts|frontend)"
                required: false
                type: string
                default: base
        outputs:
            image:
                description: "Resolved image reference"
                value: ${{ jobs.resolve.outputs.image }}
            tag:
                description: "Resolved tag"
                value: ${{ jobs.resolve.outputs.tag }}

permissions:
    contents: read
    packages: read

jobs:
    guard:
        name: Guard CI image tag
        runs-on: ubuntu-latest
        # Propagate repository/org variable vars.CI_IMAGE_TAG (or explicit input) into the environment
        # so the guard script can enforce pinned tags reliably on GitHub-hosted runners.
        env:
            CI_IMAGE_TAG: ${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || vars.CI_IMAGE_TAG || '' }}
        steps:
            - name: Enforce non-latest CI image tag
              shell: bash
              env:
                  INPUT_TAG: ${{ inputs.ci_image_tag }}
              run: |
                  set -euo pipefail
                  INPUT_TAG="${INPUT_TAG:-}"
                  ENV_TAG="${CI_IMAGE_TAG:-}"

                  is_act_env() {
                      if [[ "${ACT:-}" == "true" || "${IS_ACT:-}" == "true" ]]; then
                          return 0
                      fi
                      case "${GITHUB_WORKSPACE:-}" in
                          /github/*) return 0 ;;
                      esac
                      return 1
                  }

                  ACT_MODE=false
                  if [[ "${ACT_STRICT:-}" == "1" ]]; then
                      ACT_MODE=false
                  else
                      if is_act_env; then ACT_MODE=true; fi
                  fi

                  is_valid_immutable_tag() {
                      local tag="$1"
                      [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([-.][0-9A-Za-z]+)*$ ]] && return 0
                      [[ "$tag" =~ ^[0-9]{4}\.[0-9]{2}\.[0-9]{2}-[0-9a-f]{7,40}$ ]] && return 0
                      return 1
                  }

                  if [[ "${INPUT_TAG}" == "latest" ]]; then
                      if [[ "$ACT_MODE" == true ]]; then
                          echo "Note: ci_image_tag input is 'latest' (allowed under act); prefer immutable tag for CI." >&2
                          exit 0
                      fi
                      echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
                      exit 1
                  fi

                  if [[ -n "${INPUT_TAG}" ]]; then
                      if [[ "$ACT_MODE" == true && ( "${INPUT_TAG}" == "dev-local" || "${INPUT_TAG}" == "latest" ) ]]; then
                          echo "Note: ci_image_tag='${INPUT_TAG}' allowed under act (dev/local)." >&2
                          exit 0
                      fi
                      if ! is_valid_immutable_tag "${INPUT_TAG}"; then
                          echo "ci_image_tag='${INPUT_TAG}' is not an accepted immutable tag. Use 'vMAJOR.MINOR.PATCH' or 'YYYY.MM.DD-<sha>'." >&2
                          exit 1
                      fi
                      exit 0
                  fi

                  if [[ -z "${INPUT_TAG}" ]]; then
                      if [[ "$ACT_MODE" == true ]]; then
                          if [[ -z "${ENV_TAG}" ]]; then
                              echo "Note: ci_image_tag input not provided. Under act, proceeding without a pinned tag (dev/local)." >&2
                              exit 0
                          fi
                          if [[ "${ENV_TAG}" == "latest" ]]; then
                              echo "Note: CI_IMAGE_TAG is 'latest' (allowed under act); prefer immutable tag for CI." >&2
                              exit 0
                          fi
                          if [[ "${ENV_TAG}" == dev-local ]]; then
                              echo "Note: CI_IMAGE_TAG is 'dev-local' (allowed under act)." >&2
                              exit 0
                          fi
                          if is_valid_immutable_tag "${ENV_TAG}"; then
                              echo "Note: ci_image_tag input not provided. Using CI_IMAGE_TAG='${ENV_TAG}'." >&2
                          else
                              echo "Note: ci_image_tag input not provided and CI_IMAGE_TAG='${ENV_TAG}' does not match immutable patterns; allowed under act but should be corrected for CI." >&2
                          fi
                          exit 0
                      fi

                      if [[ -z "${ENV_TAG}" ]]; then
                          echo "ci_image_tag input not provided and CI_IMAGE_TAG is unset. Set a repository/organization variable CI_IMAGE_TAG to an immutable tag (Settings → Secrets and variables → Actions → Variables) to avoid drift." >&2
                          exit 1
                      fi
                      if [[ "${ENV_TAG}" == "latest" ]]; then
                          echo "CI_IMAGE_TAG must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
                          exit 1
                      fi
                      if ! is_valid_immutable_tag "${ENV_TAG}"; then
                          echo "CI_IMAGE_TAG='${ENV_TAG}' is not an accepted immutable tag. Use 'vMAJOR.MINOR.PATCH' or 'YYYY.MM.DD-<sha>'." >&2
                          exit 1
                      fi
                      echo "Using CI_IMAGE_TAG='${ENV_TAG}'." >&2
                  fi

                  exit 0

    resolve:
        name: Resolve image
        needs: guard
        runs-on: ubuntu-latest
        # Use the same propagation so the composite action can fall back to CI_IMAGE_TAG when input is empty.
        env:
            CI_IMAGE_TAG: ${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || vars.CI_IMAGE_TAG || '' }}
        outputs:
            image: ${{ steps.r.outputs.image }}
            tag: ${{ steps.r.outputs.tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
            - name: Resolve
              id: r
              uses: ./.github/actions/resolve-ci-image
              with:
                  ci_image_tag: ${{ inputs.ci_image_tag }}
                  kind: ${{ inputs.kind }}

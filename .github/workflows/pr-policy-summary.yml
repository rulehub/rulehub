name: PR Policy Summary

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  noop-push:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "PR Policy Summary runs on PR; noop on push for visibility."
  noop-act:
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "[act] pr-policy-summary skipped."

  summary:
    # Guard against act and non-PR events (where pull_request fields are undefined)
    if: ${{ github.actor != 'nektos/act' && (github.event_name != 'pull_request' || github.event.pull_request.draft == false) }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    container:
      image: ghcr.io/${{ github.repository_owner }}/ci-base:latest
      options: --user 0:0
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0
      - name: Install deps (runtime only)
        run: python-venv-install
      - name: Generate coverage JSON
        run: bash tools/ci/venv-run.sh make policy-test-coverage
      - name: Generate PR summary markdown
        id: gen
        run: |
          bash tools/ci/venv-run.sh python tools/pr_comment_policy_summary.py \
            --base-ref "${{ github.event.pull_request.base.sha }}" \
            --head-ref "${{ github.sha }}" > pr_summary.md
          bash tools/ci/gha-write-output.sh summary pr_summary.md
      - name: Upsert PR comment
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const marker = '<!-- policy-pr-summary -->';
            const body = marker + '\n' + process.env.SUMMARY_BODY;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100
            });
            const existing = comments.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
        env:
          SUMMARY_BODY: ${{ steps.gen.outputs.summary }}

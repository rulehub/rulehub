name: PR Policy Summary

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

jobs:
  noop-act:
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "[act] pr-policy-summary skipped."

  summary:
    if: ${{ github.event.pull_request.draft == false && github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.11"
      - name: Install deps (runtime only)
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -U pip
          if [ -f requirements.lock ]; then pip install -r requirements.lock; else pip install -r requirements.txt; fi
      - name: Generate coverage JSON
        run: |
          . .venv/bin/activate
          make policy-test-coverage
      - name: Generate PR summary markdown
        id: gen
        run: |
          . .venv/bin/activate
          python tools/pr_comment_policy_summary.py \
            --base-ref "${{ github.event.pull_request.base.sha }}" \
            --head-ref "${{ github.sha }}" > pr_summary.md
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          cat pr_summary.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Upsert PR comment
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const marker = '<!-- policy-pr-summary -->';
            const body = marker + '\n' + process.env.SUMMARY_BODY;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100
            });
            const existing = comments.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
        env:
          SUMMARY_BODY: ${{ steps.gen.outputs.summary }}

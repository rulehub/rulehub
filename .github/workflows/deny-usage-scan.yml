name: deny-usage-scan

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., YYYY.MM.DD-<sha> or v1.2.3). Falls back to repo/org variable CI_IMAGE_TAG or the repository's pinned fallback."
        required: false
        default: ""
      force_fallback:
        description: "Force running the host fallback path (skip container even if available)."
        required: false
        default: "false"
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Enforce non-latest CI image tag
        shell: bash
        run: bash .github/scripts/guard-ci-image-tag.sh "${{ inputs.ci_image_tag }}"

  scan:
    name: Rego deny[] rule enforcement scan
    needs: [guard, resolve, probe-ghcr]
    # Run container path only when image pull is possible AND not explicitly forcing fallback via workflow_dispatch input
    if: ${{ needs.probe-ghcr.outputs.can_pull == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force_fallback == 'true') }}
    runs-on: ubuntu-latest
    container:
      image: "${{ needs.resolve.outputs.image }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install deps (minimal)
        run: |
          python-venv-install
      - name: Run deny usage scan
        run: |
          . .venv/bin/activate
          bash .github/scripts/python-ensure-and-run.sh "import yaml" python tools/deny_usage_scan.py

  probe-ghcr:
    name: Probe GHCR access (ci-base)
    needs: [guard, resolve]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      can_pull: ${{ steps.probe.outputs.can_pull }}
    steps:
      - name: Try anonymous pull (ci-base)
        id: probe
        shell: bash
        run: |
          set -euo pipefail
          IMAGE_REF="${{ needs.resolve.outputs.image }}"
          echo "Probing anonymous pull for $IMAGE_REF"
          if docker image inspect "$IMAGE_REF" >/dev/null 2>&1; then
            echo "Image present locally; skipping pull"
            echo "can_pull=true" >> "$GITHUB_OUTPUT"
          elif command -v timeout >/dev/null 2>&1; then
            if timeout 120s docker pull "$IMAGE_REF"; then
              echo "can_pull=true" >> "$GITHUB_OUTPUT"
            else
              echo "can_pull=false" >> "$GITHUB_OUTPUT"
            fi
          elif docker pull "$IMAGE_REF"; then
            echo "can_pull=true" >> "$GITHUB_OUTPUT"
          else
            echo "can_pull=false" >> "$GITHUB_OUTPUT"
          fi

  scan-fallback:
    name: Rego deny[] rule enforcement scan (fallback, no container)
    needs: [guard, probe-ghcr]
    # Run fallback when image pull is NOT possible OR explicitly forced via workflow_dispatch input
    if: ${{ needs.probe-ghcr.outputs.can_pull != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force_fallback == 'true') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          check-latest: true
      - name: Cache pip
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: |
            ~/.cache/pip
          key: pip-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('.github/requirements/ensure-minimal.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-
      - name: Install deps (minimal, host)
        shell: bash
        run: |
          set -euo pipefail
          VENV_MINIMAL=1 bash .github/scripts/python-venv-install.sh
          # Ensure only strictly required packages for the run are available
          . .venv/bin/activate
          python -m pip install -U pip
          pip install -r .github/requirements/ensure-minimal.txt
      - name: Run deny usage scan (host)
        shell: bash
        run: |
          set -euo pipefail
          bash .github/scripts/python-ensure-and-run.sh "import yaml" python tools/deny_usage_scan.py
  resolve:
    name: Resolve CI image (ci-base)
    needs: guard
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.r.outputs.image }}
      tag: ${{ steps.r.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Resolve image
        id: r
        uses: ./.github/actions/resolve-ci-image
        with:
          ci_image_tag: ${{ inputs.ci_image_tag }}
          kind: base

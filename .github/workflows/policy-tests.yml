name: policy-tests

on:
  pull_request:
    paths:
      - "policies/**"
      - "tests/kyverno/**"
      - "tests/gatekeeper/**"
      - "tools/validate_metadata.py"
      - "requirements.txt"
      - ".github/workflows/policy-tests.yml"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tests/kyverno/**"
      - "tests/gatekeeper/**"
      - "tools/validate_metadata.py"
      - "requirements.txt"
      - ".github/workflows/policy-tests.yml"
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for all RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""
      run_metadata_only:
        description: "Run only metadata validation"
        required: false
        type: boolean
        default: false
      run_kyverno_only:
        description: "Run only Kyverno tests"
        required: false
        type: boolean
        default: false
      run_gatekeeper_only:
        description: "Run only Gatekeeper tests"
        required: false
        type: boolean
        default: false

concurrency:
  group: policy-tests-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

env:
  # Default empty; nektos/act sets ACT=true in jobs. This allows using env.ACT in conditions without linter complaints.
  ACT: ""

jobs:
  guard:
    name: Require CI image tag (no drift)
    uses: ./.github/workflows/resolve-ci-image.yml
    with:
      ci_image_tag: ${{ inputs.ci_image_tag }}
      kind: base

  resolve-policy:
    name: Resolve CI image (policy)
    needs: guard
    uses: ./.github/workflows/resolve-ci-image.yml
    with:
      ci_image_tag: ${{ inputs.ci_image_tag }}
      kind: policy

  resolve:
    name: Collect resolved images
    needs: [guard, resolve-policy]
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.out.outputs.base }}
      policy: ${{ steps.out.outputs.policy }}
    steps:
      - name: Emit outputs
        id: out
        shell: bash
        run: |
          echo "base=${{ needs.guard.outputs.image }}" >> "$GITHUB_OUTPUT"
          echo "policy=${{ needs.resolve-policy.outputs.image }}" >> "$GITHUB_OUTPUT"

  changes:
    name: Detect Changes (PRs)
    runs-on: ubuntu-latest
    outputs:
      changed_metadata: ${{ steps.set.outputs.changed_metadata }}
      changed_kyverno: ${{ steps.set.outputs.changed_kyverno }}
      changed_gatekeeper: ${{ steps.set.outputs.changed_gatekeeper }}
    steps:
      - name: Checkout
        if: ${{ env.ACT != 'true' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0
      - name: Compute change flags
        id: set
        shell: bash
        run: |
          set -euo pipefail
          cm=true; ck=true; cg=true
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            cm=false; ck=false; cg=false
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.sha }}"
            git fetch --no-tags --depth=100 origin "$BASE" "$HEAD" || true
            CHANGED=$(git diff --name-only "$BASE" "$HEAD" || true)
            while IFS= read -r f; do
              [ -z "$f" ] && continue
              case "$f" in
                policies/*|tools/validate_metadata.py|requirements.txt|requirements.lock) cm=true ;;
              esac
              case "$f" in
                tests/kyverno/*|policies/*) ck=true ;;
              esac
              case "$f" in
                tests/gatekeeper/*|addons/k8s-gatekeeper/*|policies/*) cg=true ;;
              esac
            done <<< "$CHANGED"
          fi
          echo "changed_metadata=$cm" >> "$GITHUB_OUTPUT"
          echo "changed_kyverno=$ck" >> "$GITHUB_OUTPUT"
          echo "changed_gatekeeper=$cg" >> "$GITHUB_OUTPUT"
  metadata:
    name: Metadata Validate
    needs: [guard, resolve, changes]
    # Run on PR when metadata changed; otherwise use manual toggles or default-all behavior
    if: ${{ inputs.run_metadata_only || (github.event_name == 'pull_request' && needs.changes.outputs.changed_metadata == 'true') || (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && !inputs.run_kyverno_only && !inputs.run_gatekeeper_only && !inputs.run_metadata_only) }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.resolve.outputs.base }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 5
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        if: ${{ env.ACT != 'true' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Validate policy metadata
        run: bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/validate_metadata.py
      - name: Enforce policy test coverage thresholds
        run: |
          bash .github/scripts/python-ensure-and-run.sh "import json" python tools/policy_test_coverage.py >/dev/null
          bash .github/scripts/python-ensure-and-run.sh "import json" python tools/enforce_policy_test_thresholds.py

  kyverno-tests:
    name: Kyverno Tests
    needs: [guard, resolve, changes]
    if: ${{ inputs.run_kyverno_only || (github.event_name == 'pull_request' && needs.changes.outputs.changed_kyverno == 'true') || (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && !inputs.run_gatekeeper_only && !inputs.run_metadata_only && !inputs.run_kyverno_only) }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.resolve.outputs.policy }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 10
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        if: ${{ env.ACT != 'true' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Record start time
        run: echo "JOB_STARTED_TS=$(date +%s)" >> $GITHUB_ENV
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Validate policy metadata
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/validate_metadata.py
      # Kyverno CLI is preinstalled in the CI container image
      - name: Kyverno version
        run: kyverno version
      - name: Run Kyverno tests
        run: kyverno test tests/kyverno --v=0
      - name: Report duration
        run: |
          END_TS=$(date +%s)
          echo "KYVERNO_JOB_DURATION=$((END_TS - JOB_STARTED_TS))s" >> $GITHUB_STEP_SUMMARY

  gatekeeper-tests:
    name: Gatekeeper OPA Tests
    needs: [guard, resolve, changes]
    if: ${{ inputs.run_gatekeeper_only || (github.event_name == 'pull_request' && needs.changes.outputs.changed_gatekeeper == 'true') || (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && !inputs.run_kyverno_only && !inputs.run_metadata_only && !inputs.run_gatekeeper_only) }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.resolve.outputs.policy }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 10
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        if: ${{ env.ACT != 'true' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Record start time
        run: echo "JOB_STARTED_TS=$(date +%s)" >> $GITHUB_ENV
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Validate policy metadata
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema" python tools/validate_metadata.py
      # OPA is preinstalled in the CI container image
      - name: OPA version
        run: opa version
      - name: Run Gatekeeper OPA unit tests
        run: opa test tests/gatekeeper/policies tests/gatekeeper/tests
      - name: Report duration
        run: |
          END_TS=$(date +%s)
          echo "GATEKEEPER_JOB_DURATION=$((END_TS - JOB_STARTED_TS))s" >> $GITHUB_STEP_SUMMARY

  policy-test-pairs:
    name: Policy Test Pairs
    needs: [guard, resolve, changes]
    if: ${{ inputs.run_kyverno_only || inputs.run_gatekeeper_only || (github.event_name == 'pull_request' && (needs.changes.outputs.changed_gatekeeper == 'true' || needs.changes.outputs.changed_kyverno == 'true')) || (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && (!inputs.run_metadata_only && (!inputs.run_kyverno_only || !inputs.run_gatekeeper_only))) }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.resolve.outputs.base }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 5
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        if: ${{ env.ACT != 'true' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Enforce policy/test file pairing
        run: |
          bash .github/scripts/python-ensure-and-run.sh "import yaml" python tools/enforce_policy_test_pairs.py

  policy-test-threshold:
    name: Policy Test Threshold
    needs: [guard, resolve, changes, gatekeeper-tests, policy-test-pairs]
    if: ${{ inputs.run_gatekeeper_only || (github.event_name == 'pull_request' && needs.changes.outputs.changed_gatekeeper == 'true') || (github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && !inputs.run_metadata_only && !inputs.run_kyverno_only && !inputs.run_gatekeeper_only) }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.resolve.outputs.base }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 5
    env:
      PYTHONPATH: /github/workspace
      ALLOW_MULTI_INADEQUATE: 200
    steps:
      - name: Checkout
        if: ${{ env.ACT != 'true' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      # Ensure Python deps installed in venv before enforcing thresholds
      - name: Enforce thresholds (dual-direction 100%, no multi-rule gaps)
        run: bash .github/scripts/enforce-policy-thresholds.sh

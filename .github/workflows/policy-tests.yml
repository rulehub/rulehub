name: policy-tests

on:
  pull_request:
    paths:
      - "policies/**"
      - "tests/kyverno/**"
      - "tests/gatekeeper/**"
      - "tools/validate_metadata.py"
      - "requirements.txt"
      - ".github/workflows/policy-tests.yml"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tests/kyverno/**"
      - "tests/gatekeeper/**"
      - "tools/validate_metadata.py"
      - "requirements.txt"
      - ".github/workflows/policy-tests.yml"
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for all RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""

concurrency:
  group: policy-tests-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Ensure ci_image_tag or CI_IMAGE_TAG is set and not 'latest'
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  # changes:
  #   name: Detect Changes
  #   runs-on: ubuntu-latest
  #   outputs:
  #     metadata: ${{ steps.filter.outputs.metadata }}
  #     kyverno: ${{ steps.filter.outputs.kyverno }}
  #     gatekeeper: ${{ steps.filter.outputs.gatekeeper }}
  #   steps:
  #     - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
  #     - id: filter
  #       uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
  #       with:
  #         base: 'main'
  #         filters: |
  #           metadata:
  #             - 'policies/**'
  #             - 'tools/validate_metadata.py'
  #             - 'requirements.txt'
  #             - 'requirements.lock'
  #           kyverno:
  #             - 'tests/kyverno/**'
  #             - 'policies/**'
  #           gatekeeper:
  #             - 'tests/gatekeeper/**'
  #             - 'addons/k8s-gatekeeper/**'
  #             - 'policies/**'

  metadata:
    name: Metadata Validate
    needs: guard
    # Run for smoke testing - skip change detection
    # if: >-
    #   ${{ needs.changes.outputs.metadata == 'true' &&
    #       needs.changes.outputs.kyverno != 'true' &&
    #       needs.changes.outputs.gatekeeper != 'true' }}
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 5
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Validate policy metadata
        run: |
          . .venv/bin/activate
          python tools/validate_metadata.py
      - name: Enforce policy test coverage thresholds
        run: |
          . .venv/bin/activate
          # Ensure coverage JSON exists before enforcing thresholds
          python tools/policy_test_coverage.py >/dev/null
          python tools/enforce_policy_test_thresholds.py

  kyverno-tests:
    name: Kyverno Tests
    needs: guard
    # Run for smoke testing - skip change detection
    # needs: changes
    # if: needs.changes.outputs.kyverno == 'true'
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-policy:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 10
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Record start time
        run: echo "JOB_STARTED_TS=$(date +%s)" >> $GITHUB_ENV
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Validate policy metadata
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          . .venv/bin/activate
          # Ensure minimal deps available if venv install skipped
          python -c "import yaml, jsonschema" 2>/dev/null || pip install --no-input pyyaml jsonschema
          python tools/validate_metadata.py
      # Kyverno CLI is preinstalled in the CI container image
      - name: Kyverno version
        run: kyverno version
      - name: Run Kyverno tests
        run: kyverno test tests/kyverno --v=0
      - name: Report duration
        run: |
          END_TS=$(date +%s)
          echo "KYVERNO_JOB_DURATION=$((END_TS - JOB_STARTED_TS))s" >> $GITHUB_STEP_SUMMARY

  gatekeeper-tests:
    name: Gatekeeper OPA Tests
    needs: guard
    # Run for smoke testing - skip change detection
    # needs: changes
    # if: needs.changes.outputs.gatekeeper == 'true'
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-policy:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 10
    env:
      OPA_VERSION: "v1.8.0"
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Record start time
        run: echo "JOB_STARTED_TS=$(date +%s)" >> $GITHUB_ENV
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Validate policy metadata
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          . .venv/bin/activate
          # Ensure minimal deps available if venv install skipped
          python -c "import yaml, jsonschema" 2>/dev/null || pip install --no-input pyyaml jsonschema
          python tools/validate_metadata.py
      # OPA is preinstalled in the CI container image
      - name: OPA version
        run: opa version
      - name: Run Gatekeeper OPA unit tests
        run: opa test tests/gatekeeper/policies tests/gatekeeper/tests
      - name: Report duration
        run: |
          END_TS=$(date +%s)
          echo "GATEKEEPER_JOB_DURATION=$((END_TS - JOB_STARTED_TS))s" >> $GITHUB_STEP_SUMMARY

  policy-test-pairs:
    name: Policy Test Pairs
    needs: guard
    # Run for smoke testing - skip change detection
    # needs: gatekeeper-tests
    # if: needs.changes.outputs.gatekeeper == 'true'
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 5
    env:
      PYTHONPATH: /github/workspace
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      # Node & Python are provided by the CI container image
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Enforce policy/test file pairing
        run: |
          . .venv/bin/activate
          # Call the Python script directly to avoid depending on make inside container
          python tools/enforce_policy_test_pairs.py

  policy-test-threshold:
    name: Policy Test Threshold
    needs: guard
    # Run for smoke testing - skip change detection
    # needs: [changes, gatekeeper-tests, policy-test-pairs]
    # if: needs.changes.outputs.gatekeeper == 'true'
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    defaults:
      run:
        shell: bash
    timeout-minutes: 5
    env:
      PYTHONPATH: /github/workspace
      ALLOW_MULTI_INADEQUATE: 200
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      # Ensure Python deps installed in venv before enforcing thresholds
      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Enforce thresholds (dual-direction 100%, no multi gaps)
        run: |
          . .venv/bin/activate
          # Generate coverage first to ensure JSON is fresh, then enforce thresholds
          python tools/policy_test_coverage.py >/dev/null
          python tools/enforce_policy_test_thresholds.py
      # - name: Upload coverage artifacts
      #   if: always() && github.repository != ''
      #   uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      #   with:
      #     name: policy-test-coverage
      #     path: |
      #       dist/policy-test-coverage.json
      #       dist/policy-test-priorities.md
      - name: Summary
        if: always()
        run: |
          if [ -f dist/policy-test-coverage.json ]; then
            dual=$(jq -r '.dual_direction.percent' dist/policy-test-coverage.json)
            inadequate=$(jq -r '.multi_rule.count_inadequate' dist/policy-test-coverage.json)
            echo "### Policy Test Threshold\n" >> $GITHUB_STEP_SUMMARY
            echo "Dual-direction: ${dual}%" >> $GITHUB_STEP_SUMMARY
            echo "Multi-rule inadequacies: ${inadequate}" >> $GITHUB_STEP_SUMMARY
            if [ "$inadequate" != "0" ]; then
              echo '\nFailures (first 10):' >> $GITHUB_STEP_SUMMARY
              jq -r '.multi_rule.list_inadequate[:10][] | "- \(.policy) deny_rules=\(.deny_rules) tests=\(.deny_test_assertions)"' dist/policy-test-coverage.json >> $GITHUB_STEP_SUMMARY || true
            fi
          fi

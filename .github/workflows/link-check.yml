name: link-check

on:
  pull_request:
    paths:
      - "**/*.md"
      - ".github/workflows/link-check.yml"
  workflow_dispatch:
  # Temporary: run on push to main; parts may move to tag triggers later
  push:
    branches: [main]
    paths:
      - "**/*.md"
      - ".github/workflows/link-check.yml"

permissions:
  contents: read
  packages: read

concurrency:
  group: link-check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Enforce non-latest CI image tag
        shell: bash
        env:
          CI_IMAGE_TAG: ${{ vars.CI_IMAGE_TAG || '' }}
        run: bash .github/scripts/guard-ci-image-tag.sh ""
  resolve:
    name: Resolve CI image (base)
    needs: guard
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.r.outputs.image }}
      tag: ${{ steps.r.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Resolve image
        id: r
        uses: ./.github/actions/resolve-ci-image
        env:
          CI_IMAGE_TAG: ${{ vars.CI_IMAGE_TAG || '' }}
        with:
          kind: base
  lychee-gh:
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    needs: [guard, resolve]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Prepare classification runtime (Python already on runner)
        run: |
          python3 --version || true

      - name: Login to GHCR (public pull auth)
        env:
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin || echo "GHCR login failed; continuing anonymously"

      - name: Run link check (lychee pinned w/ retries)
        run: |
          bash .github/scripts/run_lychee.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload lychee.json (if present)
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: lychee-report
          path: lychee.json
          if-no-files-found: ignore
      - name: Step summary
        if: ${{ always() }}
        run: |
          if [ -f lychee.json ]; then
            JQ_ERRS='def errs: if (.errors|type=="array") then .errors elif (.failures|type=="array") then .failures elif (.fail_map|type=="object") then ([.fail_map[]]|add) else [] end;'
            TOTAL=$(jq "$JQ_ERRS errs | length" lychee.json || echo 0)
            HARD=$(jq "$JQ_ERRS [errs[] | select((.status|type!=\"number\") or ((.status|type==\"number\") and (.status!=429) and (.status<500 or .status>599)))] | length" lychee.json || echo 0)
            SOFT=$(jq "$JQ_ERRS [errs[] | select((.status|type==\"number\") and ((.status==429) or (.status>=500 and .status<=599)))] | length" lychee.json || echo 0)
            # Coerce empty values to 0 to avoid integer expression errors
            TOTAL=${TOTAL:-0}
            HARD=${HARD:-0}
            SOFT=${SOFT:-0}
            echo "### Link Check Summary" >> $GITHUB_STEP_SUMMARY
            echo "Total failures considered: $TOTAL" >> $GITHUB_STEP_SUMMARY
            echo "Hard failures: $HARD" >> $GITHUB_STEP_SUMMARY
            echo "Soft (ignored) failures: $SOFT" >> $GITHUB_STEP_SUMMARY
            if [ "$HARD" -gt 0 ]; then echo "\n> :x: Hard failures require fixes." >> $GITHUB_STEP_SUMMARY; fi
            if [ "$SOFT" -gt 0 ]; then echo "\n> :warning: Soft failures (429/5xx) are ignored for success but should be monitored." >> $GITHUB_STEP_SUMMARY; fi
          else
            echo "### Link Check Summary" >> $GITHUB_STEP_SUMMARY
            echo "All attempts succeeded; no lychee.json produced." >> $GITHUB_STEP_SUMMARY
          fi

  lychee-act:
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    needs: [guard, resolve]
    env:
      ACT: "true"
      # Reduce load and speed up under act
      LYCHEE_MAX_CONCURRENCY: "4"
      LYCHEE_TIMEOUT_SEC: "15"
      LYCHEE_RETRIES: "1"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Prepare classification runtime (Python already on runner)
        run: |
          python3 --version || true

      - name: Run link check (lychee pinned w/ retries)
        continue-on-error: true
        run: |
          ACT=true bash .github/scripts/run_lychee.sh

name: legacy-scan

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., YYYY.MM.DD-<sha> or v1.2.3). Falls back to repo/org variable CI_IMAGE_TAG or the repository's pinned fallback."
        required: false
        default: ""
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    outputs:
      is_act: ${{ steps.detect.outputs.is_act }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Enforce non-latest CI image tag
        shell: bash
        run: bash .github/scripts/guard-ci-image-tag.sh "${{ inputs.ci_image_tag }}"
      - name: Detect act runtime
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ "${ACT:-}" = "true" ] || [ "${IS_ACT:-}" = "true" ]; then
            echo "Detected act environment"
            echo "is_act=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_act=false" >> "$GITHUB_OUTPUT"
          fi
  resolve:
    name: Resolve CI image (ci-base)
    needs: guard
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.r.outputs.image }}
      tag: ${{ steps.r.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Resolve image
        id: r
        uses: ./.github/actions/resolve-ci-image
        with:
          ci_image_tag: ${{ inputs.ci_image_tag }}
          kind: base
  probe-ghcr:
    name: Probe GHCR access (ci-base)
    needs: [guard, resolve]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      can_pull: ${{ steps.probe.outputs.can_pull }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Try anonymous pull (ci-base)
        id: probe
        shell: bash
        run: |
          set -euo pipefail
          bash .github/scripts/ghcr-probe.sh "${{ needs.resolve.outputs.image }}"

  legacy:
    name: Legacy violation[] scan
    needs: [guard, resolve, probe-ghcr]
    if: ${{ needs.probe-ghcr.outputs.can_pull == 'true' && needs.guard.outputs.is_act != 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ${{ needs.resolve.outputs.image }}
      options: --user 0:0
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install deps (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh
      - name: Run deny-usage scan (legacy violation[] enforcement)
        run: |
          . .venv/bin/activate
          python tools/deny_usage_scan.py

  legacy-fallback:
    name: Legacy violation[] scan (fallback, no container)
    needs: [guard, probe-ghcr]
    if: ${{ needs.probe-ghcr.outputs.can_pull != 'true' || needs.guard.outputs.is_act == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Run deny-usage scan (host)
        shell: bash
        run: |
          set -euo pipefail
          # Ensure minimal deps, prefer existing venv if present; install only what's missing.
          bash .github/scripts/python-ensure-and-run.sh "import yaml, jsonschema, ruamel.yaml, requests" \
            python tools/deny_usage_scan.py

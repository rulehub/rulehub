name: python-opa-matrix

on:
  pull_request:
    paths:
      - "policies/**"
      - "tools/**"
      - "tests/**"
      - "requirements*.txt"
      - "requirements*.lock"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tools/**"
      - "tests/**"
      - "requirements*.txt"
      - "requirements*.lock"
  workflow_dispatch:

permissions:
  contents: read
  packages: read

jobs:
  matrix-compat:
    name: Python ${{ matrix.python-version }} / OPA ${{ matrix.opa-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ghcr.io/rulehub/ci-policy:latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        opa-version: ["1.6.0", "1.7.1"]
    # Skip under ACT to avoid network-dependent setup steps
    if: ${{ github.actor != 'nektos/act' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Resolve Python interpreter for ${{ matrix.python-version }}
        run: |
          set -euo pipefail
          WANT="python${{ matrix.python-version }}"
          if command -v "$WANT" >/dev/null 2>&1; then
            PY_BIN="$WANT"
          else
            echo "Requested $WANT not found; falling back to system python3" >&2
            PY_BIN="python3"
          fi
          echo "Using PYTHON_BIN=$PY_BIN"
          "$PY_BIN" -V
          echo "PYTHON_BIN=$PY_BIN" >> "$GITHUB_ENV"

      - name: Select OPA ${{ matrix.opa-version }} (pre-baked)
        env:
          OPA_VERSION: ${{ matrix.opa-version }}
        run: |
          set -euo pipefail
          if command -v opa-select >/dev/null 2>&1; then
            # Verify the selected OPA version exists in the image and export it for later steps
            opa-select "${OPA_VERSION}" version
            SEL_BIN=$(opa-select "${OPA_VERSION}" --print-bin)
            echo "Using OPA at $SEL_BIN"
            "$SEL_BIN" version
            # Persist for subsequent steps (avoid writing to /usr/local/bin/)
            echo "OPA_BIN=$SEL_BIN" >> "$GITHUB_ENV"
            echo "OPA_VERSION=$OPA_VERSION" >> "$GITHUB_ENV"
          else
            echo "opa-select not found in image; falling back to installer"
            bash .github/scripts/install-opa.sh "${OPA_VERSION}"
          fi

      - name: Install Python deps (minimal)
        env:
          PYTHON_BIN: ${{ env.PYTHON_BIN }}
        run: bash .github/scripts/python-venv-install.sh

      - name: OPA policy type check
        run: bash .github/scripts/opa-check.sh

      - name: Run tooling tests (pytest)
        run: |
          set -euo pipefail
          if [ "${ACT:-}" = "true" ]; then
            echo "ACT=true detected; skipping pytest to avoid heavy parallel installs"
            exit 0
          fi
          . .venv/bin/activate
          pytest -q tests/tools

      - name: Incompatibility Gate
        if: ${{ failure() }}
        run: |
          if [ "${ACT:-}" = "true" ]; then
            echo "Detected potential incompatibility for Python ${{ matrix.python-version }} / OPA ${{ matrix.opa-version }} (non-fatal under ACT)" >&2
            exit 0
          else
            echo "Detected potential incompatibility for Python ${{ matrix.python-version }} / OPA ${{ matrix.opa-version }}" >&2
            exit 1
          fi

      - name: Summary
        if: always()
        run: |
          echo "python=${{ matrix.python-version }} opa=${{ matrix.opa-version }} status=${{ job.status }}"

  noop-act:
    # Lightweight success path for local ACT runs
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "[act] python-opa-matrix skipped."

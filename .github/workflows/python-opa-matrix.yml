name: python-opa-matrix

on:
  pull_request:
    paths:
      - "policies/**"
      - "tools/**"
      - "tests/**"
      - "requirements*.txt"
      - "requirements*.lock"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tools/**"
      - "tests/**"
      - "requirements*.txt"
      - "requirements*.lock"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  matrix-compat:
    name: Python ${{ matrix.python-version }} / OPA ${{ matrix.opa-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        opa-version: ["1.6.0", "1.7.1"]
    if: ${{ github.actor != 'nektos/act' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "${{ matrix.python-version }}"
          cache: pip
          cache-dependency-path: |
            requirements.lock
            requirements.txt
            requirements-dev.lock
            requirements-dev.txt

      - name: Install OPA ${{ matrix.opa-version }}
        run: |
          set -euo pipefail
          OPA_VERSION="${{ matrix.opa-version }}"
          mkdir -p ~/.cache/opa
          if [ ! -f ~/.cache/opa/opa-${OPA_VERSION} ]; then
            echo "Downloading OPA ${OPA_VERSION}" >&2
            curl -sSL -o ~/.cache/opa/opa-${OPA_VERSION} "https://openpolicyagent.org/downloads/v${OPA_VERSION}/opa_linux_amd64_static" || \
              curl -sSL -o ~/.cache/opa/opa-${OPA_VERSION} "https://openpolicyagent.org/downloads/v${OPA_VERSION}/opa_linux_amd64"
            chmod +x ~/.cache/opa/opa-${OPA_VERSION}
          else
            echo "Using cached OPA ${OPA_VERSION}" >&2
            # Ensure cached file is executable
            chmod +x ~/.cache/opa/opa-${OPA_VERSION} || true
          fi
          # Some ACT images may not have sudo or may not allow writing to /usr/local/bin
          if command -v sudo >/dev/null 2>&1; then
            sudo cp ~/.cache/opa/opa-${OPA_VERSION} /usr/local/bin/opa || true
          fi
          if ! command -v opa >/dev/null 2>&1; then
            mkdir -p "$HOME/.local/bin"
            cp ~/.cache/opa/opa-${OPA_VERSION} "$HOME/.local/bin/opa"
            chmod +x "$HOME/.local/bin/opa"
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
          opa version

      - name: Install Python deps (minimal)
        run: |
          set -euo pipefail
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -U pip
          # Work around --require-hashes + conditional deps on older Pythons.
          # requirements.lock was generated on Python 3.13 and may omit
          # conditional transitive deps like typing-extensions for 3.11/3.12.
          # Preinstall them so pip does not attempt to resolve them (which would
          # otherwise fail hash checking in lock mode).
          PY_VER=$(python -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
          case "$PY_VER" in
            3.11|3.12)
              python -m pip install "typing-extensions==4.15.0"
              ;;
          esac
          if [ -f requirements.lock ]; then pip install -r requirements.lock; elif [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.lock ]; then pip install -r requirements-dev.lock; elif [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: OPA policy type check
        run: |
          set -euo pipefail
          opa check policies

      - name: Run tooling tests (pytest)
        run: |
          set -euo pipefail
          . .venv/bin/activate
          pytest -q tests/tools

      - name: Incompatibility Gate
        if: ${{ failure() }}
        run: |
          echo "Detected potential incompatibility for Python ${{ matrix.python-version }} / OPA ${{ matrix.opa-version }}" >&2
          exit 1

      - name: Summary
        if: always()
        run: |
          echo "python=${{ matrix.python-version }} opa=${{ matrix.opa-version }} status=${{ job.status }}"

name: opa-quick-check

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub policy image (e.g., YYYY.MM.DD-<sha> or v1.2.3). Falls back to repo/org variable CI_IMAGE_TAG or the repository's pinned fallback."
        required: false
        default: ""

permissions:
  contents: read
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    env:
      CI_IMAGE_TAG: ${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || vars.CI_IMAGE_TAG || '' }}
    outputs:
      is_act: ${{ steps.detect.outputs.is_act }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Enforce non-latest CI image tag
        shell: bash
        run: bash .github/scripts/guard-ci-image-tag.sh "${{ inputs.ci_image_tag }}"
      - name: Detect act runtime
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ "${ACT:-}" = "true" ] || [ "${IS_ACT:-}" = "true" ]; then
            echo "Detected act environment"
            echo "is_act=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_act=false" >> "$GITHUB_OUTPUT"
          fi
  resolve:
    name: Resolve CI image (ci-policy)
    needs: guard
    runs-on: ubuntu-latest
    env:
      CI_IMAGE_TAG: ${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || vars.CI_IMAGE_TAG || '' }}
    outputs:
      image: ${{ steps.r.outputs.image }}
      tag: ${{ steps.r.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Resolve image
        id: r
        uses: ./.github/actions/resolve-ci-image
        with:
          ci_image_tag: ${{ inputs.ci_image_tag }}
          kind: policy

  probe-ghcr:
    name: Probe GHCR access (ci-policy)
    needs: [guard, resolve]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      can_pull: ${{ steps.probe.outputs.can_pull }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Try anonymous pull (ci-policy)
        id: probe
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          bash .github/scripts/ghcr-probe.sh "${{ needs.resolve.outputs.image }}"

  quick:
    name: OPA quick check
    runs-on: ubuntu-latest
    needs: [guard, resolve, probe-ghcr]
    if: ${{ needs.guard.outputs.is_act != 'true' && needs.probe-ghcr.outputs.can_pull == 'true' }}
    container:
      image: "${{ needs.resolve.outputs.image }}"
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - name: Parse & type check
        run: bash .github/scripts/opa-parse-typecheck.sh policies

      - name: Forbidden pattern scan
        run: bash .github/scripts/opa-forbidden-scan.sh policies

      - name: OPA fmt check
        run: bash .github/scripts/opa-fmt-check.sh policies

      - name: Summary
        if: always()
        run: |
          echo "OPA quick check complete"
          echo "::notice title=OPA Quick Check::Parse+Type, Forbidden Scan, Format OK"

  quick-fallback:
    name: OPA quick check (fallback, no container)
    runs-on: ubuntu-latest
    needs: [guard, resolve, probe-ghcr]
    if: ${{ needs.guard.outputs.is_act == 'true' || needs.probe-ghcr.outputs.can_pull != 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Setup OPA (host)
        run: |
          set -euo pipefail
          # Load centralized versions if available to obtain OPA_VERSION
          if [[ -f .github/versions.env ]]; then source .github/versions.env; fi
          # Retry install to mitigate transient network/checksum hiccups
          for i in 1 2 3; do
            if bash .github/scripts/install-opa.sh "${OPA_VERSION:-1.8.0}"; then
              break
            fi
            echo "install-opa.sh failed (attempt $i), retrying..." >&2
            sleep $((2*i))
          done
          opa version
      - name: Parse & type check
        run: bash .github/scripts/opa-parse-typecheck.sh policies
      - name: Forbidden pattern scan
        run: bash .github/scripts/opa-forbidden-scan.sh policies
      - name: OPA fmt check
        run: bash .github/scripts/opa-fmt-check.sh policies
      - name: Summary
        if: always()
        run: |
          echo "OPA quick check (host) complete"
          echo "::notice title=OPA Quick Check (host)::Parse+Type, Forbidden Scan, Format OK"

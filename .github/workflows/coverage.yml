name: Coverage Map

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""
  pull_request:
    paths:
      - "policies/**"
      - "compliance/maps/**"
      - "tools/coverage_map.py"
      - "addons/**"
  push:
    paths:
      - "policies/**"
      - "compliance/maps/**"
      - "tools/coverage_map.py"
      - "addons/**"

permissions:
  contents: read
  actions: write

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  build:
    needs: guard
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install dependencies
        run: |
          python-venv-install

      - name: Generate coverage artifacts
        run: |
          . .venv/bin/activate
          # Ensure minimal deps are present for coverage script under act images
          python -c "import yaml, jsonschema" 2>/dev/null || pip install --no-input pyyaml jsonschema
          python tools/coverage_map.py

      - name: Validate plugin index schema
        if: ${{ github.actor != 'nektos/act' }}
        run: |
          . .venv/bin/activate
          python - <<'EOF'
          import json, sys
          import jsonschema
          schema = json.load(open('tools/schemas/plugin-index.schema.json'))
          data = json.load(open('dist/index.json'))
          jsonschema.validate(data, schema)
          print('dist/index.json schema validation OK')
          EOF

      - name: Enforce committed artifacts up-to-date
        shell: bash
        run: |
          set -euo pipefail
          if [ "${ACT:-}" = "true" ]; then
            echo "[act] Skipping artifact enforcement (dist/index.json may be untracked locally)";
            exit 0;
          fi
          # Show git status before diff
          git status --short || true
          # If generation changed tracked artifacts, fail with guidance
          CHANGED=$(git diff --name-only docs/coverage.md dist/index.json || true)
          if [ -n "$CHANGED" ]; then
            echo 'ERROR: Generated artifacts are out of date:'
            echo "$CHANGED"
            echo 'Run locally: make coverage (or python3 tools/coverage_map.py) and commit updated docs/coverage.md & dist/index.json.'
            exit 1
          fi
          echo 'Artifact check passed: docs/coverage.md and dist/index.json are up to date.'

      - name: Upload artifacts
        if: ${{ github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage-artifacts
          path: |
            docs/coverage.md
            dist/coverage.html
            dist/policies-index.json
            dist/coverage.json
            dist/index.json

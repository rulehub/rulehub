name: python-tests

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""
  pull_request:
    paths:
      - "tools/**"
      - "tests/tools/**"
      - "requirements-dev.*"
      - "requirements.*"
  push:
    branches: [main, master]
    paths:
      - "tools/**"
      - "tests/tools/**"
      - "requirements-dev.*"
      - "requirements.*"

permissions:
  contents: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  tests:
    needs: guard
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/${{ github.repository_owner }}/ci-base:${{ inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5') }}"
      options: --user 0:0
    strategy:
      matrix:
        python-version: ["3.11", "3.13"]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Prepare Python env (venv with baked deps)
        run: |
          bash .github/scripts/python-venv-install.sh

      - name: Run pytest (tools)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          . .venv/bin/activate
          # Ensure pytest and minimal deps exist if venv install was skipped under ACT
          python -c "import pytest" 2>/dev/null || pip install --no-input pytest
          python -c "import yaml" 2>/dev/null || pip install --no-input pyyaml
          python -c "import jsonschema" 2>/dev/null || pip install --no-input jsonschema
          pytest -q tests/tools

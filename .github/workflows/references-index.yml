name: references-index

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""
  pull_request:
    paths:
      - "policies/**"
      - "tools/generate_refs_index.py"
      - ".github/workflows/references-index.yml"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tools/generate_refs_index.py"
      - ".github/workflows/references-index.yml"
  # legacy manual trigger kept above with inputs

permissions:
  contents: read
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    steps:
      - name: Enforce non-latest CI image tag
        shell: bash
        run: |
          input_tag="${{ inputs.ci_image_tag }}"
          if [ "$input_tag" = "latest" ]; then
            echo "Workflow input ci_image_tag must not be 'latest'. Use an immutable tag (e.g., 2025.10.03-<sha> or vX.Y.Z)." >&2
            exit 1
          fi
          if [ -z "$input_tag" ]; then
            echo "Note: ci_image_tag input not provided. Ensure repository variable CI_IMAGE_TAG is set to a pinned tag to avoid drift." >&2
          fi
  build-index:
    needs: guard
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ${{ github.actor == 'nektos/act' && 'ghcr.io/catthehacker/ubuntu:act-22.04' || format('ghcr.io/{0}/ci-base:{1}', github.repository_owner, inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5')) }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user 0:0
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Prepare Python env (venv with baked deps)
        run: |
          if command -v python-venv-install >/dev/null 2>&1; then
            python-venv-install
          else
            set -euo pipefail
            if ! command -v python3 >/dev/null 2>&1; then
              apt-get update && apt-get install -y python3 python3-venv python3-pip
            fi
            python3 -m venv .venv
            . .venv/bin/activate
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          fi
      - name: Generate references index (md+json)
        run: |
          . .venv/bin/activate
          # Ensure minimal deps are present if image skipped installs
          python -c "import yaml, jsonschema" 2>/dev/null || pip install --no-input pyyaml jsonschema
          python tools/generate_refs_index.py --format both --fail-missing-links
          ls -l docs/references-index.md dist/references-index.json || true

  # Run artifact upload in a separate job so act does not need to fetch the action when skipped
  upload-index:
    needs: build-index
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      actions: write
      packages: read
    container:
      image: ${{ github.actor == 'nektos/act' && 'ghcr.io/catthehacker/ubuntu:act-22.04' || format('ghcr.io/{0}/ci-base:{1}', github.repository_owner, inputs.ci_image_tag != '' && inputs.ci_image_tag || (vars.CI_IMAGE_TAG != '' && vars.CI_IMAGE_TAG || '2025.10.03-f072ceb5')) }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user 0:0
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Prepare Python env (venv with baked deps)
        run: |
          if command -v python-venv-install >/dev/null 2>&1; then
            python-venv-install
          else
            set -euo pipefail
            if ! command -v python3 >/dev/null 2>&1; then
              apt-get update && apt-get install -y python3 python3-venv python3-pip
            fi
            python3 -m venv .venv
            . .venv/bin/activate
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          fi
      - name: Generate references index (md+json)
        run: |
          . .venv/bin/activate
          # Ensure minimal deps are present if image skipped installs
          python -c "import yaml, jsonschema" 2>/dev/null || pip install --no-input pyyaml jsonschema
          python tools/generate_refs_index.py --format both --fail-missing-links
          ls -l docs/references-index.md dist/references-index.json || true
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: references-index
          path: |
            docs/references-index.md
            dist/references-index.json

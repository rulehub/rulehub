name: link-audit

on:
  workflow_dispatch:
    inputs:
      ci_image_tag:
        description: "CI image tag for RuleHub CI images (e.g., 2025.10.03-a1b2c3d4 or v1.2.3). Falls back to repo variable CI_IMAGE_TAG or latest."
        required: false
        default: ""
  pull_request:
    paths:
      - "policies/**"
      - "tools/audit_links.py"
      - "tools/validate_links_baseline.py"
      - "links_audit_baseline.json"
      - ".github/workflows/link-audit.yml"
  push:
    branches: [main]
    paths:
      - "policies/**"
      - "tools/audit_links.py"
      - "tools/validate_links_baseline.py"
      - "links_audit_baseline.json"
      - ".github/workflows/link-audit.yml"

permissions:
  contents: read
  actions: write
  packages: read

jobs:
  guard:
    name: Require CI image tag (no drift)
    runs-on: ubuntu-latest
    outputs:
      is_act: ${{ steps.detect.outputs.is_act }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Enforce non-latest CI image tag
        shell: bash
        run: bash .github/scripts/guard-ci-image-tag.sh "${{ inputs.ci_image_tag }}"
      - name: Detect act runtime
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ "${ACT:-}" = "true" ] || [ "${IS_ACT:-}" = "true" ]; then
            echo "Detected act environment"
            echo "is_act=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_act=false" >> "$GITHUB_OUTPUT"
          fi
  probe-ghcr:
    name: Probe GHCR access (ci-base)
    needs: guard
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      can_pull: ${{ steps.probe.outputs.can_pull }}
      image: ${{ steps.resolve.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Resolve CI image (ci-base)
        id: resolve
        uses: ./.github/actions/resolve-ci-image
        with:
          ci_image_tag: ${{ inputs.ci_image_tag }}
          kind: base
      - name: Try anonymous pull (ci-base)
        id: probe
        shell: bash
        env:
          IMAGE_REF: ${{ steps.resolve.outputs.image }}
        run: |
          set -euo pipefail
          chmod +x .github/scripts/probe-image-pull.sh || true
          out=$(PROBE_IMAGE="$IMAGE_REF" .github/scripts/probe-image-pull.sh)
          echo "$out"
          # Extract only the key=value line for GITHUB_OUTPUT
          cp_line=$(echo "$out" | awk -F= '/^can_pull=(true|false)$/ {print $0; exit}')
          if [[ -n "${cp_line}" ]]; then
            echo "$cp_line" >> "$GITHUB_OUTPUT"
          else
            # Safe default
            echo "can_pull=false" >> "$GITHUB_OUTPUT"
          fi

  audit:
    needs: [guard, probe-ghcr]
    # Run containerized audit whenever the CI image is available locally (including under act)
    if: ${{ needs.probe-ghcr.outputs.can_pull == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.probe-ghcr.outputs.image }}
      options: --user 0:0
    defaults:
      run:
        shell: bash
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Prepare Python env (venv with baked deps)
        run: |
          python-venv-install
      - name: Run link audit
        run: |
          set -euo pipefail
          chmod +x .github/scripts/run-link-audit.sh || true
          .github/scripts/run-link-audit.sh

  audit-fallback:
    name: Link audit (fallback, no container)
    needs: [guard, probe-ghcr]
    # Run fallback only when the CI image cannot be used
    if: ${{ needs.probe-ghcr.outputs.can_pull != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || pip install pyyaml jsonschema
      - name: Run link audit (host)
        run: |
          set -euo pipefail
          chmod +x .github/scripts/run-link-audit.sh || true
          .github/scripts/run-link-audit.sh

  upload-artifacts:
    name: Upload audit artifacts
    needs: audit
    # Skip in ACT runs
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Upload audit summary & baseline
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: link-audit
          path: |
            link_audit_output.txt
            links_audit_baseline.json
